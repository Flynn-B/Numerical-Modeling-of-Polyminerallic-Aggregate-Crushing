"""
    Code to view slices of results generated by MCRpy in X,Y,Z directions
    - Flynn Basehart
"""

import numpy as np
import matplotlib.pyplot as plt
from matplotlib.widgets import Slider

# Load the 3D data
data_npy = np.load("results\\results\\fourthgeneration.npy")  # shape: (Z, Y, X)
z_slices, y_size, x_size = data_npy.shape

# Initial slice positions (set all sliders to 0 initially)
init_z = 0
init_y = 0
init_x = 0

# Create figure and axes for the three views (2 rows, 3 columns)
fig, axs = plt.subplots(2, 3, figsize=(12, 8))
plt.subplots_adjust(bottom=0.35)

# Initial display of slices
img_axial = axs[0, 0].imshow(data_npy[:, :, init_z][:, ::-1])  # Flip Z slice horizontally
axs[0, 0].set_title(f'Slice (Z={init_z})')
axs[0, 0].axis('off')

# Flip the X slice vertically, not rotate
img_sagittal = axs[0, 1].imshow(data_npy[init_x, :, :][::-1, :])  # Flip X slice vertically
axs[0, 1].set_title(f'Axial Slice (X={init_x})')
axs[0, 1].axis('off')

# Correct Y slice (no rotation or flipping)
img_coronal = axs[0, 2].imshow(data_npy[:, init_y, :])  
axs[0, 2].set_title(f'Slice (Y={init_y})')
axs[0, 2].axis('off')

# Bottom row for labeled axes and crosshairs
img_axial_crosshair = axs[1, 0].imshow(data_npy[:, :, init_z][:, ::-1], cmap='gray')  # Flip Z slice horizontally
axs[1, 0].set_title(f'Slice (Z={init_z}) Crosshair')
axs[1, 0].axis('off')

img_sagittal_crosshair = axs[1, 1].imshow(data_npy[init_x, :, :][::-1, :], cmap='gray')  # Flip X slice vertically
axs[1, 1].set_title(f'Axial Slice (X={init_x}) Crosshair')
axs[1, 1].axis('off')

img_coronal_crosshair = axs[1, 2].imshow(data_npy[:, init_y, :], cmap='gray')  # Correct Y slice
axs[1, 2].set_title(f'Slice (Y={init_y}) Crosshair')
axs[1, 2].axis('off')

# Label the axes for each slice
axs[1, 0].set_xlabel('X')  # Axial image X axis label
axs[1, 0].set_ylabel('Y')  # Axial image Y axis label

axs[1, 1].set_xlabel('Z')  # Sagittal image Z axis label
axs[1, 1].set_ylabel('Y')  # Sagittal image Y axis label

axs[1, 2].set_xlabel('Z')  # Coronal image Z axis label
axs[1, 2].set_ylabel('X')  # Coronal image X axis label

# Slider axes: [left, bottom, width, height]
ax_slider_z = plt.axes([0.2, 0.25, 0.6, 0.03])
ax_slider_y = plt.axes([0.2, 0.18, 0.6, 0.03])
ax_slider_x = plt.axes([0.2, 0.11, 0.6, 0.03])

# Sliders for Z, Y, X
slider_z = Slider(ax_slider_z, 'Z (Axial)', 0, z_slices - 1, valinit=init_z, valstep=1)
slider_y = Slider(ax_slider_y, 'Y (Slice)', 0, y_size - 1, valinit=init_y, valstep=1)
slider_x = Slider(ax_slider_x, 'X (Slice)', 0, x_size - 1, valinit=init_x, valstep=1)

# Update function for all sliders
def update(val):
    z = int(slider_z.val)
    y = int(slider_y.val)
    x = int(slider_x.val)

    # Update regular slices
    img_axial.set_data(data_npy[:, :, z][:, ::-1])  # Flip Z slice horizontally
    axs[0, 0].set_title(f'Slice (Z={z})')

    # Flip the X slice vertically
    img_sagittal.set_data(data_npy[x, :, :][::-1, :])  # Flip X slice vertically
    axs[0, 1].set_title(f'Axial (X={x})')

    # Update Coronal slice (Y)
    img_coronal.set_data(data_npy[:, y, :])  
    axs[0, 2].set_title(f'Slice (Y={y})')

    # Update crosshair slices (showing intersection at the same position)
    img_axial_crosshair.set_data(data_npy[:, :, z][:, ::-1])  # Flip Z slice horizontally
    axs[1, 0].set_title(f'Slice (Z={z}) Crosshair')

    img_sagittal_crosshair.set_data(data_npy[x, :, :][::-1, :])  # Flip X slice vertically
    axs[1, 1].set_title(f'Axial (X={x}) Crosshair')

    # Update Coronal crosshair slice (Y)
    img_coronal_crosshair.set_data(data_npy[:, y, :])  
    axs[1, 2].set_title(f'Slice (Y={y}) Crosshair')

    # Add crosshairs (lime green lines) ONLY on the bottom row
    axs[1, 0].cla()  # Clear the current image in Axial crosshair
    axs[1, 0].imshow(data_npy[:, :, z][:, ::1], cmap='gray')
    axs[1, 0].set_title(f'Slice (Z={z}) Crosshair')
    #axs[1, 0].axvline(x=x_size - 1 - y, color='#32CD32', linestyle='--')  # vertical line for X
    axs[1, 0].axvline(x=y, color='#32CD32', linestyle='--')  # vertical line for X
    axs[1, 0].axhline(y=x, color='#32CD32', linestyle='--')  # horizontal line for Y

    # Label axes AFTER clearing
    axs[1, 0].set_xlabel('Y')
    axs[1, 0].set_ylabel('X')
    # Flip the X-axis (so it matches unflipped data orientation)
    axs[1, 0].invert_xaxis()

    axs[1, 1].cla()  # Clear the current image in Sagittal crosshair
    axs[1, 1].imshow(data_npy[x, :, :][::1, :], cmap='gray')
    axs[1, 1].set_title(f'Axial (X={x}) Crosshair')
    axs[1, 1].axvline(x=z, color='#32CD32', linestyle='--')  # vertical line for Y
    #axs[1, 1].axhline(y=y_size - 1 - y, color='#32CD32', linestyle='--')  # horizontal line for Z
    axs[1, 1].axhline(y=y, color='#32CD32', linestyle='--')  # horizontal line for Z

    # Label axes AFTER clearing
    axs[1, 1].set_xlabel('Z')
    axs[1, 1].set_ylabel('Y')
    axs[1, 1].invert_yaxis()

    axs[1, 2].cla()  # Clear the current image in Coronal crosshair
    axs[1, 2].imshow(data_npy[:, y, :], cmap='gray')  # No rotation for Coronal crosshair
    axs[1, 2].set_title(f'Slice (Y={y}) Crosshair')
    axs[1, 2].axvline(x=z, color='#32CD32', linestyle='--')  # vertical line for Z
    axs[1, 2].axhline(y=x, color='#32CD32', linestyle='--')  # horizontal line for X
    
    # Label axes AFTER clearing
    axs[1, 2].set_xlabel('Z')
    axs[1, 2].set_ylabel('X')

    # Redraw everything
    fig.canvas.draw_idle()

# Attach update function to sliders
slider_z.on_changed(update)
slider_y.on_changed(update)
slider_x.on_changed(update)

plt.show()
